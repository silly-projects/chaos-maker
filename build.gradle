import org.apache.tools.ant.filters.ReplaceTokens
import org.gradle.plugins.signing.Sign
import javax.swing.*
import groovy.text.SimpleTemplateEngine
import org.kohsuke.github.*

buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.kohsuke:github-api:1.90'
    }
}

plugins {
    id 'java'
    id 'groovy'
    
    id 'eclipse'
    id 'idea'
    
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.7.2"
    id "net.saliman.properties" version "1.4.6"
    id "com.github.ethankhall.semantic-versioning" version "1.1.0"
    id "com.github.ben-manes.versions" version "0.13.0"
    id "org.asciidoctor.convert" version "1.5.3"
    id "org.ajoberstar.git-publish" version "0.3.2"
    id "com.github.hierynomus.license" version "0.12.1"
    id 'com.github.jk1.dependency-license-report' version '0.3.8'
    id "com.bmuschko.clover" version "2.2.0"
}

project.version.with {
    major = chaosMakerVersionMajor as int
    minor= chaosMakerVersionMinor as int
    patch = chaosMakerVersionPatch as int
    if (project.hasProperty('chaosMakerVersionLabel')) {
        preRelease = chaosMakerVersionLabel
    }
    releaseBuild = Boolean.valueOf(chaosMakerReleaseBuild)
}
ext.chaosMakerVersion = project.version as String
ext.chaosMakerTag = Boolean.valueOf(chaosMakerReleaseBuild) ? "v$ext.chaosMakerVersion" : 'master'
def pomConfig = {
    url "https://github.com/silly-projects/chaos-maker"
    developers {
        developer {
            id "siordache"
            name "Serban Iordache"
        }
    }
    scm {
        connection "https://github.com/silly-projects/chaos-maker.git"
        developerConnection "https://github.com/silly-projects/chaos-maker.git"
        url "https://github.com/silly-projects/chaos-maker"
    }
}

ext.groovyVersion = '2.4.12'

allprojects {    
    group = 'org.silly'
    version = chaosMakerVersion
    
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:all,-syntax,-missing', '-quiet')
    }
}

dependencies.compile subprojects

subprojects {    
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'findbugs'
    apply plugin: 'com.bmuschko.clover'
    apply plugin: 'signing'
    
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
    
    sourceCompatibility = 1.8
    
    def defaultEncoding = 'UTF-8'
    [compileJava, compileTestJava]*.options*.encoding = defaultEncoding
    
    configurations {
        provided
        compile {transitive = true}
    }
    
    license {
        header rootProject.file("license-header.txt")
        skipExistingHeaders true
        ignoreFailures false
    }
    
    signing {
        sign configurations.archives
    }
    
    signArchives {
        onlyIf { gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)} }
    }
    
    dependencies {
        
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
        
        provided 'com.google.code.findbugs:findbugs-annotations:3.0.1'
        
        testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
        testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
            exclude module: 'groovy-all'
        }
        testCompile 'cglib:cglib-nodep:3.2.4'
        testCompile 'org.objenesis:objenesis:2.4'
        testCompile('com.athaydes:spock-reports:1.2.13') { transitive = false}
        testCompile('ch.qos.logback:logback-classic:1.1.7')
        clover 'org.openclover:clover:4.2.1'
    }
    
    sourceSets.main.compileClasspath += configurations.provided
    findbugs {
        effort = "max"
        excludeFilter = file("$rootProject.projectDir/findbugsExclude.xml")
    }
    jar {
        manifest {
            attributes 'Implementation-Title': "${project.archivesBaseName}",
                    'Implementation-Version': chaosMakerVersion
        }
    
        from ("${projectDir}/src/main/java") {
            include('**/*.fxml')
            include('**/*.css')
            include('**/*.png')
        }
    }
    
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
    task javadocJar(type: Jar, dependsOn: classes) {
        classifier "javadoc"
        from javadoc
    }
    artifacts {
        (System.getenv("TRAVIS") == "true") ? archives(sourcesJar) : archives(sourcesJar, javadocJar)
    }
    publishing {
        publications {
            "$project.name"(MavenPublication) {
                from components.java
                artifact sourcesJar { classifier "sources" }
                artifact javadocJar { classifier "javadoc" }
                groupId 'org.silly'
                artifactId project.name
                version chaosMakerVersion
                pom.withXml {
                    def root = asNode()
                    root.appendNode('name', "Module $project.name")
                    root.appendNode('description', "The $project.name artifact")
                    root.children().last() + pomConfig
    
                    // We cannot configure the licenses in pomConfig due to a name conflict with the 'license' extension defined by the com.github.hierynomus.license plugin
                    def licenseNode = root.appendNode('licenses').appendNode('license')
                    licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                    licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                    licenseNode.appendNode('distribution', 'repo')
                }
            }
        }
    }
    
    task "create-dirs" {
        doLast {
            sourceSets*.java.srcDirs*.each { it.mkdirs() }
            
            sourceSets*.resources.srcDirs*.each { it.mkdirs() }
        }
    }
    
    eclipse {
        classpath {
            file {
                whenMerged {
                    def jre = entries.find { it.path.contains 'org.eclipse.jdt.launching.JRE_CONTAINER' }
                    jre.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule('0', 'javafx/**'))
                }
            }
            plusConfigurations << configurations.provided
        }
        project {
            file.beforeMerged { project ->
                project.natures.clear()
            }
        }
    }
    
    idea {
        module {
            scopes.PROVIDED.plus += [configurations.provided]
        }
    }
    clover {
        testIncludes = ['**/*Test.java', '**/*Spec.groovy']
    //        targetPercentage = '85%'
    
        contexts {
            statement {
                name = 'log'
                regexp = '^.*logger\\..*'
            }
            method {
                name = 'main'
                regexp = 'public static void main\\(String args\\[\\]\\).*'
            }
            method {
                name = 'getters'
                regexp = 'public [^\\s]+ get[A-Z][^\\s]+\\(\\)'
                maxStatements = 1
            }
            method {
                name = 'setters'
                regexp = 'public void set[A-Z][^\\s]+\\(.+\\)'
                maxStatements = 1
            }
        }
    
        report {
            html = true
            pdf = true
            filter = 'log,main,getters,setters'
    
            testResultsDir = project.tasks.getByName('test').reports.junitXml.destination
            testResultsInclude = 'TEST-*.xml'
    
            columns {
                coveredMethods format: 'longbar', min: '75'
                coveredStatements format: '%'
                coveredBranches format: 'raw'
                totalPercentageCovered format: '%', scope: 'package'
            }
        }
    }
}
asciidoctor {
    sourceDir = file("doc")
    sources {include 'index.adoc'}
    logDocuments = true
    attributes 'source-highlighter': 'coderay',
               'coderay-linenums-mode': 'table',
               icons: 'font',
               imagesdir: 'img',
               'data-uri': '',
               linkattrs: true,
               linkcss: true,
               'git-tag': chaosMakerTag,
               'blob-root-master': "https://github.com/silly-projects/chaos-maker/blob/master",
               'blob-root': "https://github.com/silly-projects/chaos-maker/blob/$chaosMakerTag"
}

gitPublish {
    System.properties['org.ajoberstar.grgit.auth.username'] = System.getenv('GH_PAGES_ACCESS_TOKEN') ?: ''
    System.properties['org.ajoberstar.grgit.auth.password'] = ''

    repoUri = 'https://github.com/silly-projects/chaos-maker.git'
    branch = 'gh-pages'

    contents {
        def pgType = project.hasProperty('ghPageType') ? ghPageType : 'latest'
        if(pgType == 'init') {
            from file("ghpages")
        } else if(pgType == 'list') {
            from file("build/release-list")
        } else {
            from file("${asciidoctor.outputDir.path}/html5")
            from file("build/docs")
        }
        def docDir = Boolean.valueOf(chaosMakerReleaseBuild) ? 'releases' : 'snapshots'
        if(pgType == 'init') {
            into "."
        } else if(pgType == 'list') {
            into "."
            preserve {
                include '**'
                exclude "releases.md"
            }
        } else if(pgType == 'version') {
            gitPublishPush.enabled = (docDir != 'snapshots')
            into "$docDir/$chaosMakerVersion"

            preserve {
                include '**'
                exclude "$docDir/$chaosMakerVersion"
            }
        } else {
            into "$docDir/latest"

            preserve {
                include '**'
                exclude "$docDir/latest"
            }
        }
    }
}  


project('chaos-core') {     
    
    dependencies {
        compile project(':chaos-api')
        
    }
}

project('chaos-api') {     
    
    dependencies {
        
    }
}

project('chaos-demo') {     
    apply plugin: 'application'
    dependencies {
        compile project(':chaos-core')
        compile project(':chaos-api')
        runtime ('ch.qos.logback:logback-classic:1.1.7')
    }
    artifacts {
        (System.getenv("TRAVIS") == "true") ? archives(sourcesJar) : archives(sourcesJar, javadocJar)
    }
    jar {
        manifest {
            attributes 'Main-Class': 'org.silly.chaos.demo.ChaosDemo'
        }
    }
    mainClassName = 'org.silly.chaos.demo.ChaosDemo'
    
    applicationName = "chaosMaker"
    
    startScripts {
        defaultJvmOpts = ['-Dlogback.configurationFile=logback.xml']
    }
    
    applicationDistribution.from("${rootProject.projectDir}/dist") {
        filter(ReplaceTokens, tokens:[chaosMakerVersion : chaosMakerVersion])
    }
    
    applicationDistribution.from("${rootProject.projectDir}/..") {
        include('LICENSE', 'NOTICE')
    }
}


configureJavadoc(javadoc)

def configureJavadoc(task) {
    configure(task) {
        title "Chaos Maker Documentation ($chaosMakerVersion)"
        destinationDir file("build/docs/javadoc")
        source subprojects.javadoc.source
        classpath = files(subprojects.javadoc.classpath)
        if(project.configurations.hasProperty('provided')) {
            classpath += project.configurations.provided
        }
        configure(options) {
            links "http://docs.oracle.com/javase/8/docs/api/"
        }
    }
}

task "update-release-list" {
    doLast {
        updateReleaseList('https://silly-projects.github.io/chaos-maker')
    }
}

def updateReleaseList(String docBaseUrl) {
    List<String> releases = getReleases()
    def markdown = getReleasesMarkdown(releases, docBaseUrl)
    def releaseListDir = new File('build/release-list')
    releaseListDir.mkdirs()
    new File(releaseListDir, 'releases.md').write(markdown)
}

def getReleases() {
    GitHub gitHubApi = GitHub.connectUsingPassword(System.getenv('GH_PAGES_ACCESS_TOKEN') ?: '', '')
    def releases = gitHubApi.getOrganization('silly-projects')
            .getRepository('chaos-maker')
            .getDirectoryContent("releases", "gh-pages")*.name
    releases.removeAll { !it || it == 'latest' }
    releases.reverse()
}

def getReleasesMarkdown(List<String> releases, String docBaseUrl) {
    def releasesTemplate = '''
            ## List of all releases ##

            **Latest snapshot**
            - [documentation](\u0024docBaseUrl/snapshots/latest)
            - [javadoc](\u0024docBaseUrl/snapshots/latest/javadoc)

            <% releases.each { %>**Release \u0024it**
              - [documentation](\u0024docBaseUrl/releases/\u0024it)
              - [javadoc](\u0024docBaseUrl/releases/\u0024it/javadoc)

            <% } %>
        '''.stripIndent()

    def engine = new SimpleTemplateEngine()
    def template = engine.createTemplate(releasesTemplate)
    def binding = [
            docBaseUrl: docBaseUrl,
            releases  : releases
    ]

    template.make(binding).toString()
}

def readPasswordFromConsole(title, prompt) {
    JPanel panel = new JPanel()
    JLabel label = new JLabel(prompt)
    JPasswordField pass = new JPasswordField(24)
    panel.add(label)
    panel.add(pass)
    def options = ["OK", "Cancel"] as Object[]
    int option = JOptionPane.showOptionDialog(null, panel, title,
            JOptionPane.NO_OPTION, JOptionPane.PLAIN_MESSAGE, null, options, null)
    if(option != 0) throw new InvalidUserDataException("Operation cancelled by the user.")
    new String(pass.password)
}

def isPublishTask(task) {
    task.name.startsWith('publish')
}

gradle.taskGraph.whenReady { taskGraph ->
    if (gradle.taskGraph.allTasks.findAll {task -> isPublishTask(task)}) {
        if(!project.hasProperty('signingKeyId') || !project.hasProperty('signingSecretKeyRingFile'))
            throw new InvalidUserDataException("Please configure your signing credentials in gradle-local.properties.")
        def password = readPasswordFromConsole('Please enter your PGP credentials:', 'PGP Private Key Password')
        allprojects { ext."signing.keyId" = signingKeyId }
        allprojects { ext."signing.secretKeyRingFile" = signingSecretKeyRingFile }
        allprojects { ext."signing.password" = password }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.getProperty('bintrayUser') : "unknownUser"
    key =  project.hasProperty('bintrayKey') ? project.getProperty('bintrayKey') : "unknownKey"
    publications = subprojects.name
    pkg {
        repo = 'maven'
        name = 'chaos-maker'
        userOrg = 'silly-projects'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/silly-projects/chaos-maker.git'

        version {
                name = chaosMakerVersion
                desc = "Chaos Maker $chaosMakerVersion"
                released  = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZZ")
                vcsTag = chaosMakerVersion
                gpg {
                    sign = true
                }
        }
    }
}
